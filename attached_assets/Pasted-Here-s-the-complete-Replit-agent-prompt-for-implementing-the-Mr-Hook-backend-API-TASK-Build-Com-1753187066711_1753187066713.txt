Here's the complete Replit agent prompt for implementing the Mr Hook backend API:

**TASK: Build Complete Backend API for Mr Hook Fishing Supplies E-commerce Platform**

You need to create a full Node.js Express backend with PostgreSQL database integration. This is for a fishing supplies store that needs user authentication, product management, shopping cart, and order processing.

**DATABASE SETUP REQUIREMENTS**

First, create these exact database tables in PostgreSQL. The users table needs id as serial primary key, first_name varchar 100 not null, last_name varchar 100 not null, home_address text not null, email varchar 255 unique not null, password varchar 255 not null, and created_at timestamp default current_timestamp.

The products table requires id serial primary key, name varchar 255 not null, price decimal 10,2 not null, description text, image varchar 255, type varchar 100 not null, category varchar 50, stock integer default 0, and created_at timestamp default current_timestamp.

For orders table use id serial primary key, user_id integer references users id, order_placed boolean default false, date_ordered timestamp default current_timestamp, total_price decimal 10,2 not null.

Order items needs id serial primary key, product_id integer references products id, order_id integer references orders id, quantity integer not null, subtotal decimal 10,2 not null.

Cart items requires id serial primary key, user_id integer references users id, product_id integer references products id, quantity integer not null, created_at timestamp default current_timestamp, and unique constraint on user_id product_id combination.

**PACKAGE DEPENDENCIES**

Install express version 4.18.2, cors version 2.8.5, bcryptjs version 2.4.3, jsonwebtoken version 9.0.0, and pg version 8.10.0. Create a server directory with server.js as main file and database.js for database connection.

**CRITICAL API ENDPOINTS TO IMPLEMENT**

Authentication routes include POST /api/auth/register for user registration and POST /api/auth/login for user login. Both must hash passwords with bcryptjs and return JWT tokens with 24 hour expiry.

Product routes need GET /api/products that returns all products with optional query filters for category, search term, minPrice, and maxPrice. Also GET /api/products/:id for single product by ID. These routes require no authentication.

Cart routes must be protected with JWT authentication. GET /api/cart returns user's cart items with full product details. POST /api/cart/add adds items to cart, handling existing items by updating quantity. PUT /api/cart/update modifies item quantities. DELETE /api/cart/remove/:productId removes specific items. DELETE /api/cart/clear empties entire cart.

Order routes also require authentication. POST /api/orders creates order from current cart items, calculates total, saves to orders and order_items tables, then clears the cart automatically. GET /api/orders returns user's complete order history with order items and product details.

Profile routes include GET /api/profile returning user information and PUT /api/profile for updating user details like first name, last name, and home address.

**AUTHENTICATION IMPLEMENTATION**

Create authenticateToken middleware that checks authorization header for Bearer token, verifies JWT with your secret, and sets req.user with decoded user data. Return 401 for missing token and 403 for invalid token.

Use bcryptjs to hash passwords during registration and compare during login. Generate JWT tokens with user id and email, setting 24 hour expiration.

**DATABASE CONNECTION SETUP**

Use PostgreSQL Pool with connection string from DATABASE_URL environment variable. Enable SSL with rejectUnauthorized false for Replit compatibility. Set max connections to 5, idle timeout 60000ms, connection timeout 10000ms.

**SEED DATA REQUIREMENTS**

Populate products table with exactly these 8 fishing items: Premium Carbon Fiber Rod at 149.99, Professional Hook Set at 24.99, Fresh Live Bait Collection at 18.99, Tackle Storage Box at 39.99, Professional Fishing Line at 12.99, Spinning Reel Combo at 89.99, Bait Bucket Pro at 29.99, Multi-Tool Fisher at 34.99. Include descriptions and assign appropriate types like Fishing Rods, Hooks, Bait, Containers, Other.

**PRIVACY AND SECURITY RULES**

Users can only access their own cart, orders, and profile data. Use req.user.id from JWT token to filter all user-specific database queries. Product data is public and requires no authentication. Never return other users' personal information.

**RESPONSE FORMAT REQUIREMENTS**

Cart responses must include productId, quantity, and complete product object with id, name, price as float, image, description, type, category. Order responses need id, userId, total as float, status, createdAt, and items array with product details.

Profile responses should return user object with id, email, firstName, lastName, homeAddress. Login and registration responses need token and user object.

**ERROR HANDLING STANDARDS**

Return proper HTTP status codes: 200 for success, 201 for creation, 400 for bad requests, 401 for unauthorized, 403 for forbidden, 404 for not found, 500 for server errors. Include meaningful error messages in JSON responses.

**CRITICAL IMPLEMENTATION DETAILS**

Always parse price fields as float for calculations. When updating cart quantities, handle zero or negative values by removing items. Order creation must atomically create order record, copy cart items to order_items, and clear user's cart.

Cart operations should return updated cart data immediately. All database queries for user-specific data must filter by user_id from authenticated token.

**TESTING AND VALIDATION**

Create a debug endpoint GET /api/debug/database that returns database connection status and table row counts. Test sequence should be register user, login, get products, add to cart, view cart, place order, view order history.

**SERVER CONFIGURATION**

Enable CORS for frontend communication. Serve static files from root directory. Set up catch-all route to serve index.html for frontend routing. Listen on PORT environment variable or 5000 default.

**ENVIRONMENT VARIABLES**

Require DATABASE_URL for PostgreSQL connection and JWT_SECRET for token signing. Handle missing database gracefully with appropriate error messages.

**SUCCESS CRITERIA**

Database tables created and populated, user registration and login functional, JWT authentication working, cart operations updating correctly, orders saving with items and clearing cart, profile updates persisting, privacy rules enforced, all endpoints returning expected JSON formats, frontend integration working seamlessly.

The frontend expects exact field names like first_name, last_name, home_address in database responses, so match the schema precisely. All price calculations must use float conversion to prevent decimal issues.